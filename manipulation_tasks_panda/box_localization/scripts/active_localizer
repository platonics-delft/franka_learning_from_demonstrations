#!/usr/bin/env python3
import sys
sys.path.append('/home/platonics/Documents/robothon/src/franka_ros/robotthon_23_platonics/manipulation_tasks_panda/trajectory_manager/scripts')
import rospy
from std_srvs.srv import Trigger, TriggerResponse
from sensor_msgs.msg import Image, PointCloud2 
from robothon23vision.detectors import *
from panda import Panda
from transform import Transform
from box_localization.srv import ComputeLocalization
from manipulation_helpers.pose_transform_functions import list_2_quaternion, array_quat_2_pose, pose_st_2_transformation
import numpy as np

from tf.transformations import euler_from_quaternion
from queue import Queue

class ActiveLocalizerNode():
    def __init__(self) -> None:
        self._imgs = Queue(maxsize=1)
        self._img = None
        rospy.init_node("active_localizer_node")
        self._rate = rospy.Rate(1)
        self.image_sub = rospy.Subscriber('/camera/color/image_raw', Image, self.image_callback)
        self._panda = Panda()
        self._transformer = Transform()
        rospy.wait_for_service('compute_localization')
        self.compute_box_tf = rospy.ServiceProxy('compute_localization', ComputeLocalization)
        self._go_to = True
        self._window = Queue(maxsize=10)
        self._service = rospy.Service('active_localizer', Trigger, self.handle_request)

    def image_callback(self, img):
        self._img = img
        """
        self._imgs.put(img)
        if self._imgs.full():
            self._imgs.get()
        """

    def handle_request(self, req):
        final_resp = TriggerResponse()
        self._rate.sleep()
        self.timeout_counter = 0
        while not rospy.is_shutdown():
            if self._img is None:
                rospy.logwarn("No Image")
                self._rate.sleep()
            position = self._panda.curr_pos
            ori = list_2_quaternion(self._panda.curr_ori)
            home_pose = array_quat_2_pose(position, ori)
            try:
                resp = self.compute_box_tf(self._img)
                box_tf = resp.pose
                ori = [
                    resp.pose.pose.orientation.x,
                    resp.pose.pose.orientation.y,
                    resp.pose.pose.orientation.z,
                    resp.pose.pose.orientation.w
                ]
                xy_yaw = [
                    resp.pose.pose.position.x, 
                    resp.pose.pose.position.y,
                    euler_from_quaternion(ori)[2]
                ]

            except Exception as e:
                rospy.logwarn(e)
                continue
            self._transformed_pose = self._transformer.transform(box_tf, home_pose)
            self._panda.set_stiffness(4000, 4000, 4000, 50, 50, 50, 0)
            self._panda.go_to_pose(self._transformed_pose, interp_dist=0.001, interp_dist_polar=0.001)
            rospy.loginfo("Finished go to.")
            pos_error = np.linalg.norm(xy_yaw[:2])
            yaw_error = abs(xy_yaw[2])
            print(f"position error {pos_error}, yaw error {yaw_error}")
            if (pos_error < 0.001 and yaw_error < 0.2 *(np.pi/180)) or self.timeout_counter > 15:
                final_resp.message = f"Finished localization, final error: {pos_error + yaw_error}"
                final_resp.success = True
                print(final_resp.message)
                return final_resp
            self.timeout_counter = self.timeout_counter + 1

if __name__ == '__main__':
    active_localizer_node = ActiveLocalizerNode()
    rospy.spin()