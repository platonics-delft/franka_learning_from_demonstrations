#!/usr/bin/env python3
"""
Playback of trajectories and storing them into a databaseself.
"""
from lfd_image import LfD_image
from lfd_slider import LfD_slider
from std_srvs.srv import Trigger
import sys
import os
import rospy

if __name__ == '__main__':
    try:
        localization_flag = sys.argv[1]
    except IndexError:
        print("Usage: " + os.path.basename(__file__) + "< 0 or 1 to deactivate/activate localization >")
        sys.exit(1)

    lfd = LfD_image()
    # lfd_slider = LfD_slider()

    if int(localization_flag):
        rospy.wait_for_service('active_localizer')
        active_localizer = rospy.ServiceProxy('active_localizer', Trigger)
        resp = active_localizer()
        lfd.compute_final_transform() 
        # lfd_slider.compute_final_transform()

    try:
        

        lfd.load("calibrate")
        lfd.execute()
        # correction_offset = lfd.camera_correction
        # print("correction offset: ", correction_offset)
        # lfd.final_transform[:3, -1] = lfd.final_transform[:3, -1] + correction_offset

        lfd.load("blue")
        lfd.execute()
        
        lfd.load("slider_yellow")
        lfd.execute()

        rospy.wait_for_service('slider_detection')
        slider_detection = rospy.ServiceProxy('slider_detection', Trigger)
        resp = slider_detection()
        lfd.slider_exit_condition = 1
        lfd.screen_green_distance=1000
        rospy.sleep(0.2)
        if abs(lfd.screen_green_distance) < 200 and abs(lfd.screen_green_distance) > 7:
            if lfd.screen_green_distance > 0:
                lfd.load("slider_green_forward")
            else:
                lfd.load("slider_green_backwards")
        lfd.execute()
        lfd.slider_exit_condition = 0

        lfd.load("peg_pick_black")
        lfd.execute()

        lfd.load("peg_door")
        lfd.execute()

        lfd.load("peg_place")
        lfd.execute()

        lfd.load("probe_pick")
        lfd.execute()

        lfd.load("probe")
        lfd.execute()

        lfd.load("probe_place")
        lfd.execute(retry_insertion_flag=1)

        lfd.load("wrap")
        lfd.execute()

        lfd.load("red")
        lfd.execute()
    except rospy.ROSInterruptException:
        pass



