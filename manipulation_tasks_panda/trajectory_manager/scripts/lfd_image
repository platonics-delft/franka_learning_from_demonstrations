#%%
#!/usr/bin/env python
import os
import sys
import torch
import cv2
import rospy
import math
import numpy as np
import time
import rospkg
from geometry_msgs.msg import PoseStamped, Pose, WrenchStamped, Image
from pynput.keyboard import Listener, KeyCode
from cv_bridge import CvBridge, CvBridgeError
from manipulation_helpers.pose_transform_functions import orientation_2_quaternion, pose_st_2_transformation, position_2_array, array_quat_2_pose, transformation_2_pose, transform_pose, list_2_quaternion
from cv_bridge import CvBridgeError, CvBridge
import dynamic_reconfigure.client
from panda import Panda
class LfD(Panda):
    def __init__(self):
        super().__init__()
        rospy.init_node("learning_node")
        self.r=rospy.Rate(10)
        self.pose = Pose()
        self.feedback=np.zeros(4)
        self.feedback_gain=0.002
        self.faster_counter=0
        self.length_scale = 0.005
        self.correction_window = 300
        self.recorded_traj = None 
        self.recorded_ori=None
        self.recorded_gripper= None
        self.end=False
        self.grip_value=0.04
        self.attractor_distance_threshold=0.05


        self.listener = Listener(on_press=self._on_press)
        self.listener.start()
        self.spiraling = False
        
        self.pose_icp = None

        self.image_sub = rospy.Subscriber('/camera/color/image_raw', Image, self.image_callback)

        self.cropped_img_pub = rospy.Publisher('/modified_img', Image, queue_size=0)

        self.bridge = CvBridge()

        self.curr_image = None
        self.recorded_traj = None
        self.recorded_ori = None
        self.height = 720
        self.width = 1280
        self.end = False

        ros_pack = rospkg.RosPack()
        self._package_path = ros_pack.get_path('trajectory_manager')

        rospy.sleep(1)

    def image_callback(self, msg):
            # Convert the ROS message to a OpenCV image
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")

            self.curr_image = cv_image

        except CvBridgeError as e:
            print(e)

    def traj_rec(self, trigger=0.005, rec_position=True, rec_orientation=True):
        # trigger for starting the recording
        if rec_position: 
            self.set_K.update_configuration({"translational_stiffness_X": 0})
            self.set_K.update_configuration({"translational_stiffness_Y": 0})
            self.set_K.update_configuration({"translational_stiffness_Z": 0})  
        if rec_orientation: 
            self.set_K.update_configuration({"rotational_stiffness_X": 0})
            self.set_K.update_configuration({"rotational_stiffness_Y": 0})
            self.set_K.update_configuration({"rotational_stiffness_Z": 0})

        init_pos = self.curr_pos
        vel = 0 ##### Change to a more meaningful name like distance? Trigger could be distance_interval or something.
        print("Move robot to start recording.")
        while vel < trigger:
            vel = math.sqrt((self.curr_pos[0]-init_pos[0])**2 + (self.curr_pos[1]-init_pos[1])**2 + (self.curr_pos[2]-init_pos[2])**2)
        self.recorded_traj = self.curr_pos
        self.recorded_ori = self.curr_ori

        h, w = self.curr_image.shape[:2]

                # Define the new dimensions
        self.width = int(1280/4)
        self.height = int(self.width * (h / w))

        # Resize the image
        resized_img = cv2.resize(self.curr_image, (self.width, self.height), interpolation=cv2.INTER_AREA)
        self.width=int(self.width/2)
        resized_img = resized_img[:, self.width:, :]
        resized_img_msg = self.bridge.cv2_to_imgmsg(resized_img)
        self.cropped_img_pub.publish(resized_img_msg)

        self.recorded_img = resized_img.reshape((1, self.height, self.width, 3)) 
        
        print("Recording started. Press e to stop.")
        while not self.end:
            self.recorded_traj = np.c_[self.recorded_traj, self.curr_pos]
            self.recorded_ori  = np.c_[self.recorded_ori, self.curr_ori]

            h, w = self.curr_image.shape[:2]

            # Define the new dimensions
            self.width = int(1280/4)
            self.height = int(self.width * (h / w))

            # Resize the image
            resized_img = cv2.resize(self.curr_image, (self.width, self.height), interpolation=cv2.INTER_AREA)
            self.width=int(self.width/2)
            resized_img = resized_img[:, self.width:, :]
            resized_img_msg = self.bridge.cv2_to_imgmsg(resized_img)
            self.cropped_img_pub.publish(resized_img_msg)
            self.recorded_img = np.r_[self.recorded_img, resized_img.reshape((1, self.height, self.width, 3))]

            self.r.sleep()

        goal = PoseStamped()
        goal.header.seq = 1
        goal.header.stamp = rospy.Time.now()
        goal.header.frame_id = "map"

        goal.pose.position.x = self.curr_pos[0]
        goal.pose.position.y = self.curr_pos[1]
        goal.pose.position.z = self.curr_pos[2]
        
        goal.pose.orientation.w = self.curr_ori[0]
        goal.pose.orientation.x = self.curr_ori[1]
        goal.pose.orientation.y = self.curr_ori[2]
        goal.pose.orientation.z = self.curr_ori[3]
        self.goal_pub.publish(goal)
        # self.set_stiffness(100, 100, 100, 5, 5, 5, 0)
        rospy.loginfo("Ending trajectory recording")
        # self.recorded_traj = savgol_filter(self.recorded_traj, 51, 3)
        # self.recorded_ori = savgol_filter(self.recorded_ori, 51, 3)

    def execute(self, spiral_flag):
        self.spiralling_occured = False
        # self.pose_icp = None 
        print("spiral flag", bool(int(spiral_flag)))
        print('entered execute')
        start = PoseStamped()

        quat_start = list_2_quaternion(self.recorded_ori[:, 0])
        start = array_quat_2_pose(self.recorded_traj[:, 0], quat_start)
        
        if self.pose_icp:
            start = self.transform(start)
            
        self.go_to_pose(start)

        i=0
        while i <( self.recorded_traj.shape[1]):

            quat_goal = list_2_quaternion(self.recorded_ori[:, i])
            goal = array_quat_2_pose(self.recorded_traj[:, i], quat_goal)
            goal.header.seq = 1
            goal.header.stamp = rospy.Time.now()
            ori_threshold = 0.3
            pos_threshold = 0.1
            
            if self.pose_icp:
                goal = self.transform(gaol)
            
            self.correct()

            if (self.recorded_gripper[0][i]-self.recorded_gripper[0][max(0,i-1)]) < -0.02:
                print("closing gripper")
                self.grasp_gripper(self.recorded_gripper[0][i])
                time.sleep(0.1)

            if (self.recorded_gripper[0][i]-self.recorded_gripper[0][max(0,i-1)]) >0.02:
                print("open gripper")
                self.move_gripper(self.recorded_gripper[0][i])
                time.sleep(0.1)

            self.goal_pub.publish(goal)

            if self.force.z > 9 and bool(int(spiral_flag)):
                spiral_success, offset_correction = self.spiral_search(goal)
                self.spiralling_occured = True
                if spiral_success:
                    self.recorded_traj[0, i:] += offset_correction[0]
                    self.recorded_traj[1, i:] += offset_correction[1]

            goal_pos_array = position_2_array(goal.pose.position)
            if np.linalg.norm(self.curr_pos-goal_pos_array) <= self.attractor_distance_threshold:
                i=i+1
            self.r.sleep()

            # Stop playback if at end of trajectory (some indices might be deleted by feedback)
            if i == self.recorded_traj.shape[1]-1:
                break
        if self.spiralling_occured:
            print(f"recording {self.filename}, spiralling occured")
            
    def save(self, file='last'):
        np.savez(self._package_path + '/data/' + str(file) + '.npz',
                 traj=self.recorded_traj,
                 ori=self.recorded_ori,
                 grip=self.recorded_gripper,
                 img=self.recorded_img)
    
    def load(self, file='last'):
        data = np.load(self._package_path + '/trajectories/' + str(file) + '.npz')
        self.recorded_traj = data['traj']
        self.recorded_ori = data['ori']
        self.recorded_gripper = data['grip']
        self.filename=str(file)
